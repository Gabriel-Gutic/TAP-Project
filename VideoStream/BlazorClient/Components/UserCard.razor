
<table>
    <tbody>
        <tr>
            <td>
                <UserImage Id="@Id" Image="@Image"></UserImage>
            </td>
            <td>
                <div class="align-middle">
                    <h4 class="mt-1 ms-2 align-middle">@Username</h4>
                </div>
            </td>
            <td>
                @if (IsSubscriber)
                {
                    <button class="ms-2 btn btn-danger" @onclick="Unsubscribe">Unsubscribe (@SubscriberCount)</button>
                }
                else
                {
                    <button class="ms-2 btn btn-danger" @onclick="Subscribe">Subscribe (@SubscriberCount)</button>
                }
            </td>
        </tr>
    </tbody>
</table>

@code
{
    @using Contracts
    @using Data
    @using Events
    @inject ISubscriberService SubscriberService
    @inject IUserService UserService
    @inject NavigationManager NavigationManager


    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public string Username { get; set; }

    [Parameter]
    public string? Image { get; set; }

    protected UserData? CurrentUser { get; set; }

    protected bool IsSubscriber { get; set; }

    protected int SubscriberCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrentUser = await UserService.GetCurrent();

        if (CurrentUser != null)
        {
            IsSubscriber = await SubscriberService.IsSubscriber(Id, CurrentUser.Id);
        }
        else
        {
            IsSubscriber = false;
        }

        SubscriberCount = await SubscriberService.Count(Id);
    }

    public async Task Subscribe()
    {
        CheckAccount(); 
        if (CurrentUser.Id != Id)
        {
            await SubscriberService.Subscribe(Id, CurrentUser.Id);

            // Dynamic invocation
            var type = typeof(NavigationManager);
            var refreshMethod = type.GetMethod("Refresh");

            refreshMethod.Invoke(NavigationManager, new object[]{ true });
        }
    }

    public async Task Unsubscribe()
    {
        CheckAccount();
        if (CurrentUser.Id != Id)
        {
            await SubscriberService.Unsubscribe(Id, CurrentUser.Id);
            NavigationManager.Refresh();
        }
    }

    private void CheckAccount()
    {
        if (CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
